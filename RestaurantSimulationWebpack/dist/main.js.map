{"version":3,"file":"main.js","mappings":"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","sources":["webpack://restaurantsimulationwebpack/./src/Chef.js","webpack://restaurantsimulationwebpack/./src/Server.js","webpack://restaurantsimulationwebpack/./src/Order.js","webpack://restaurantsimulationwebpack/./src/utils/IdGenerator.js","webpack://restaurantsimulationwebpack/./src/index.js"],"sourcesContent":["const cookTime = {\r\n  순댓국: 1000,\r\n  해장국: 2000,\r\n};\r\n\r\nclass Chef {\r\n  constructor(name, isCook, order) {\r\n    this.name = name;\r\n    this.isCook = isCook;\r\n    this.order = order;\r\n    this.li = document.querySelector(`#chef-wrapper #chef-list #${name}`);\r\n  }\r\n\r\n  async render() {\r\n    const li = this.li;\r\n    if (!li) return;\r\n\r\n    li.innerText = `${this.name}\\t${this.isCook ? '요리중' : '대기'}\\t${\r\n      this.order ? '주문' + this.order.number : ''\r\n    }`;\r\n  }\r\n\r\n  async cookDishes(order) {\r\n    order.status = '요리중';\r\n    await order.update();\r\n    await order.renderCooking();\r\n\r\n    this.order = order;\r\n    await this.render();\r\n\r\n    const time = cookTime[order.name];\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(async () => {\r\n        await order.removeCooking();\r\n        this.isCook = false;\r\n        this.order = null;\r\n        await this.render();\r\n\r\n        resolve(order);\r\n      }, time ?? 1000);\r\n    });\r\n  }\r\n}\r\n\r\nconst chefs = [];\r\n\r\nexport const createDefaultChefs = () => {\r\n  chefs.push(new Chef('대장금', false, null), new Chef('백주부', false, null));\r\n};\r\n\r\nexport const getWatingChef = () => {\r\n  return new Promise((resolve, reject) => {\r\n    function run() {\r\n      const watingChef = chefs.find((chef) => chef.isCook === false);\r\n      if (watingChef) {\r\n        watingChef.isCook = true;\r\n        resolve(watingChef);\r\n      } else {\r\n        setTimeout(run, 200);\r\n      }\r\n    }\r\n    run();\r\n  });\r\n};\r\n\r\nexport const renderAllChefs = () => chefs.forEach((chef) => chef.render());\r\n","class Server {\r\n  constructor(name, serveTime, isServing, dishes) {\r\n    this.name = name;\r\n    this.serveTime = serveTime;\r\n    this.isServing = isServing;\r\n    this.dishes = dishes;\r\n    this.li = document.querySelector(`#server-wrapper #server-list #${name}`);\r\n  }\r\n\r\n  async serveDishes(dishes) {\r\n    dishes.status = '서빙중';\r\n    await dishes.update();\r\n    await dishes.renderServing();\r\n\r\n    this.dishes = dishes;\r\n    await this.render();\r\n\r\n    const time = this.serveTime;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(async () => {\r\n        await dishes.remove();\r\n        await dishes.removeServing();\r\n\r\n        this.isServing = false;\r\n        this.dishes = null;\r\n        await this.render();\r\n\r\n        dishes.status = '완료';\r\n        resolve(dishes);\r\n      }, time);\r\n    });\r\n  }\r\n\r\n  async render() {\r\n    const li = this.li;\r\n    if (!li) return;\r\n\r\n    li.innerText = `${this.name}\\t${this.isServing ? '서빙중' : '대기'}\\t${\r\n      this.dishes ? '주문' + this.dishes.number : ''\r\n    }`;\r\n  }\r\n}\r\n\r\nconst servers = [];\r\n\r\nexport const createDefaultServers = () => {\r\n  servers.push(\r\n    new Server('홍길동', 1000, false, null),\r\n    new Server('핑핑이', 2000, false, null),\r\n  );\r\n};\r\n\r\nexport const getWatingServer = () => {\r\n  return new Promise((resolve, reject) => {\r\n    function run() {\r\n      const watingServer = servers.find((server) => server.isServing === false);\r\n      if (watingServer) {\r\n        watingServer.isServing = true;\r\n\r\n        resolve(watingServer);\r\n      } else {\r\n        setTimeout(run, 200);\r\n      }\r\n    }\r\n    run();\r\n  });\r\n};\r\n\r\nexport const renderAllServers = () =>\r\n  servers.forEach((server) => server.render());\r\n","import { getNewIdGenerator } from './utils/IdGenerator.js';\r\n\r\nconst orderList = document.querySelector('#order-wrapper #order-list');\r\nconst cookingList = document.querySelector('#chef-wrapper #cooking-list');\r\nconst servingList = document.querySelector('#server-wrapper #serving-list');\r\n\r\nconst getNextId = getNewIdGenerator();\r\n\r\nconst orders = [];\r\n\r\nclass Order {\r\n  li = null;\r\n  cookingLi = null;\r\n  servingLi = null;\r\n\r\n  constructor(name, status) {\r\n    this.number = getNextId();\r\n    this.name = name;\r\n    this.status = status;\r\n    this.render();\r\n  }\r\n\r\n  render = () => {\r\n    this.li = document.createElement('li');\r\n    this.li.setAttribute('id', 'order' + this.number);\r\n    this.li.innerText = `주문${this.number}\\t${this.name}\\t${this.status}`;\r\n    orderList.appendChild(this.li);\r\n  };\r\n\r\n  async update() {\r\n    this.li.innerText = `주문${this.number}\\t${this.name}\\t${this.status}`;\r\n  }\r\n\r\n  async remove() {\r\n    this.li.remove();\r\n    this.li = null;\r\n  }\r\n\r\n  async renderCooking() {\r\n    this.cookingLi = document.createElement('li');\r\n    this.cookingLi.setAttribute('id', 'cooking' + this.number);\r\n    this.cookingLi.innerText = `주문${this.number}\\t${this.name}\\t${this.status}`;\r\n    cookingList.appendChild(this.cookingLi);\r\n  }\r\n\r\n  async removeCooking() {\r\n    this.cookingLi.remove();\r\n    this.cookingLi = null;\r\n  }\r\n\r\n  async renderServing() {\r\n    this.servingLi = document.createElement('li');\r\n    this.servingLi.setAttribute('id', 'serving' + this.number);\r\n    this.servingLi.innerText = `주문${this.number}\\t${this.name}\\t${this.status}`;\r\n    servingList.appendChild(this.servingLi);\r\n  }\r\n\r\n  async removeServing() {\r\n    this.servingLi.remove();\r\n    this.servingLi = null;\r\n  }\r\n}\r\n\r\nexport const createOrder = (name) => {\r\n  const order = new Order(name, '대기');\r\n  orders.push(order);\r\n};\r\n\r\nexport const getFirstOrder = () => orders.shift();\r\n","export const getNewIdGenerator = () => {\r\n  let id = 1;\r\n  return () => id++;\r\n};\r\n","import { createDefaultChefs, getWatingChef, renderAllChefs } from './Chef.js';\r\nimport {\r\n  createDefaultServers,\r\n  getWatingServer,\r\n  renderAllServers,\r\n} from './Server.js';\r\nimport { createOrder, getFirstOrder } from './Order.js';\r\n\r\nconst finishedDishes = [];\r\nconst orderButtons = document.querySelector('.btns-order');\r\n\r\nconst onOrderButtonClick = async (e) => {\r\n  const value = e.target.value;\r\n  if (!value) return;\r\n  createOrder(value);\r\n};\r\norderButtons.addEventListener('click', onOrderButtonClick);\r\n\r\nconst init = () => {\r\n  createDefaultChefs();\r\n  createDefaultServers();\r\n  renderAllChefs();\r\n  renderAllServers();\r\n};\r\ninit();\r\n\r\nconst handleOrder = async () => {\r\n  const order = getFirstOrder();\r\n  if (!order) return;\r\n\r\n  const chef = await getWatingChef();\r\n\r\n  const dishes = await chef.cookDishes(order);\r\n  const server = await getWatingServer();\r\n\r\n  const finished = await server.serveDishes(dishes);\r\n  finishedDishes.push(finished);\r\n};\r\nsetInterval(handleOrder, 1000);\r\n"],"names":["cookTime","Chef","constructor","name","isCook","order","this","li","document","querySelector","render","innerText","number","cookDishes","status","update","renderCooking","time","Promise","resolve","reject","setTimeout","async","removeCooking","chefs","Server","serveTime","isServing","dishes","serveDishes","renderServing","remove","removeServing","servers","orderList","cookingList","servingList","getNextId","id","getNewIdGenerator","orders","Order","cookingLi","servingLi","createElement","setAttribute","appendChild","finishedDishes","addEventListener","e","value","target","push","createOrder","forEach","chef","server","setInterval","shift","run","watingChef","find","watingServer","finished"],"sourceRoot":""}